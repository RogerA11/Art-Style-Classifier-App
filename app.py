# AUTOGENERATED! DO NOT EDIT! File to edit: app_model_integration.ipynb.

# %% auto 0
__all__ = ['plt', 'learn', 'art_styles', 'image', 'label', 'examples', 'interface', 'search_images', 'classify_art']

# %% app_model_integration.ipynb 2
from fastai.vision.learner import *
from fastcore.all import *
from fastbook import *
import gradio as gr

# %% app_model_integration.ipynb 3
import pathlib
plt = platform.system()
if plt == 'Windows': pathlib.PosixPath = pathlib.WindowsPath

# %% app_model_integration.ipynb 4
# create function to search for images
def search_images(image_name, max_images=100, test=False):
    if test==True:
        print(image_name)
        url = search_images_ddg(image_name, max_images=max_images)
    else:
        print(f'Searching for: {image_name}')
        url = search_images_ddg(image_name, max_images=max_images)
    return url

# %% app_model_integration.ipynb 6
learn = load_learner('model.pkl')

# %% app_model_integration.ipynb 8
art_styles = ('abstract expressionism', 'cubism', 'surrealism', )

def classify_art(img):
    pred, idx, probs = learn.predict(img)
    output = dict(zip(art_styles, map(float, probs)))
    return output 

# %% app_model_integration.ipynb 10
image = gr.inputs.Image(shape=(192, 192))
label = gr.outputs.Label()
examples = ['abstractexpressionism.jpg', 'cubism.jpg', 'surrealism.jpg']

interface = gr.Interface(fn=classify_art, inputs=image, outputs=label, examples=examples)
interface.launch(inline=False)
